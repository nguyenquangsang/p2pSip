package net.majorkernelpanic.example1;

import net.majorkernelpanic.streaming.Session;
import net.majorkernelpanic.streaming.Session.Callback;
import net.majorkernelpanic.streaming.SessionBuilder;
import net.majorkernelpanic.streaming.audio.AudioQuality;
import net.majorkernelpanic.streaming.gl.SurfaceView;
import net.majorkernelpanic.streaming.rtsp.RtspServer;
import net.majorkernelpanic.streaming.video.VideoQuality;
import android.app.Activity;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.os.Bundle;
import android.util.Log;
import android.view.SurfaceHolder;
import android.view.WindowManager;

/**
 * A straightforward example of how to use the RTSP server included in
 * libstreaming.
 */
public class MainActivity extends Activity implements Callback,
		SurfaceHolder.Callback {
	private static final String TAG = null;
	private SurfaceView mSurfaceView;
	Session mSession;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
		setContentView(R.layout.activity_main);
		setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);

		mSurfaceView = (SurfaceView) findViewById(R.id.surface);

		mSurfaceView = (SurfaceView) findViewById(R.id.surface);

		// Sets the port of the RTSP server to 1234
		Editor editor = PreferenceManager.getDefaultSharedPreferences(this)
				.edit();
		editor.putString(RtspServer.KEY_PORT, String.valueOf(1234));
		editor.commit();

		// Configures the SessionBuilder
		SessionBuilder.getInstance().setSurfaceView(mSurfaceView)
				.setPreviewOrientation(90).setContext(getApplicationContext())
				.setAudioEncoder(SessionBuilder.AUDIO_NONE)
				.setVideoEncoder(SessionBuilder.VIDEO_H264);

		// Starts the RTSP server
		this.startService(new Intent(this, RtspServer.class));
	}

	@Override
	protected void onDestroy() {
		// TODO Auto-generated method stub
		super.onDestroy();

		mSession.release();
	}

	@Override
	public void onBitrateUpdate(long bitrate) {
		// TODO Auto-generated method stub
		Log.d(TAG, "Bitrate: " + bitrate);
	}

	@Override
	public void onSessionError(int reason, int streamType, Exception e) {
		// TODO Auto-generated method stub
		Log.e(TAG, "Session Error: " + e.getMessage());
	}

	@Override
	public void onPreviewStarted() {
		// TODO Auto-generated method stub
		Log.d(TAG, "Preview started.");
	}

	@Override
	public void onSessionConfigured() {
		// TODO Auto-generated method stub
		Log.d(TAG, "Preview configured.");
		// Once the stream is configured, you can get a SDP formated session
		// description
		// that you can send to the receiver of the stream.
		// For example, to receive the stream in VLC, store the session
		// description in a .sdp file
		// and open it with VLC while streming.
		Log.d(TAG, mSession.getSessionDescription());
		mSession.start();

	}

	@Override
	public void onSessionStarted() {
		// TODO Auto-generated method stub
		Log.d(TAG, "Session started.");
	}

	@Override
	public void onSessionStopped() {
		// TODO Auto-generated method stub
		Log.d(TAG, "Session stopped.");
	}

	@Override
	public void surfaceCreated(SurfaceHolder holder) {
		// TODO Auto-generated method stub
		mSession.startPreview();
	}

	@Override
	public void surfaceChanged(SurfaceHolder holder, int format, int width,
			int height) {
		// TODO Auto-generated method stub

	}

	@Override
	public void surfaceDestroyed(SurfaceHolder holder) {
		// TODO Auto-generated method stub
		mSession.stop();
	}
}
