package me.p2p;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.Socket;

import me.p2p.spec.MessageCallback;

import org.json.JSONException;
import org.json.JSONObject;

public class MessageHandler extends Thread {
	static final String TAG = "MessageHandler";
	Socket socket;
	boolean inMessage = false;
	StringBuilder msgData = null;
	MessageCallback msgListener;

	public MessageHandler(Socket socket, MessageCallback msgListener)
			throws IOException {
		// TODO Auto-generated constructor stub
		// client;
		this.socket = socket;
		this.msgListener = msgListener;
	}

	public void run() {
		// TODO Auto-generated method stub !Thread.interrupted() &&
		// !socket.isClosed()
		while (!Thread.interrupted() && !socket.isClosed()) {
			// handle request, read data;
			String clientCommand = null;
			try {
				BufferedReader bufferedReader = new BufferedReader(
						new InputStreamReader(socket.getInputStream()));
				clientCommand = bufferedReader.readLine();
				System.out.println("Client Command: " + clientCommand);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			if (clientCommand != null) {
				if (clientCommand.equals(MsgProtocol.START_MSG)) {
					// bat dau doc data, chuan bi doi de chua;
					System.out.println(TAG + ": Start Command");

					inMessage = true;
					msgData = new StringBuilder();
				} else {
					if (clientCommand.equals(MsgProtocol.END_MSG)) {
						// ket thuc doc data;
						System.out.println(TAG + ": End Command");
						// change state of message handler;
						inMessage = false;
						// log to console;
						
						// notify msg listener;
						if (msgListener != null) {
							try {
								JSONObject data = new JSONObject(
										msgData.toString());
								msgListener.onMessage(data);
							} catch (JSONException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						}
					} else {
						if (inMessage) {
							// nếu không phải hai trường hợp kia thì append nó
							// vào
							// data;
							System.out.println(TAG
									+ ": In Message: Append Data");
							msgData.append(clientCommand);
						} else {
							System.out.println(TAG + ": Not In Message: Skip");
						}
					}
				}
			}
		}

		System.out.println(TAG + ": Message Handler Exit");
	}

	public void handleMessage() {
		System.out.println(TAG + " handle message...");
		start();
	}
}