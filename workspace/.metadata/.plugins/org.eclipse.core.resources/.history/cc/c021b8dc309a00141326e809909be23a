package android.me.p2psip.activity;

import io.vov.vitamio.MediaPlayer;
import io.vov.vitamio.MediaPlayer.OnPreparedListener;
import io.vov.vitamio.MediaPlayer.OnVideoSizeChangedListener;

import java.io.IOException;

import local.ua.UserAgent;
import me.sip.ua.specify.UACListener;
import net.majorkernelpanic.streaming.Session;
import net.majorkernelpanic.streaming.SessionBuilder;
import net.majorkernelpanic.streaming.rtsp.CustomRtspServer;
import net.majorkernelpanic.streaming.rtsp.RtspServer;
import net.majorkernelpanic.streaming.rtsp.RtspServer.CallbackListener;

import org.zoolu.sip.address.NameAddress;

import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.graphics.PixelFormat;
import android.hardware.Camera.CameraInfo;
import android.me.p2psip.R;
import android.me.p2psip.constant.Constant;
import android.me.p2psip.log.LogAndroid;
import android.media.AudioManager;
import android.os.Bundle;
import android.os.IBinder;
import android.util.Log;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.WindowManager;
import android.widget.ImageButton;

public class OnCallActivity extends SipActivity implements UACListener,
		SurfaceHolder.Callback, OnPreparedListener, OnVideoSizeChangedListener,
		CallbackListener {
	final String TAG = "OnCallActivity";
	SurfaceView mSurfaceView;
	SurfaceHolder mSurfaceHolder;

	SurfaceView mSurfaceViewPreview;
	SurfaceHolder mSurfaceHolderPr;

	MediaPlayer mMediaPlayer;

	ImageButton mBtEndCall;

	Session mSession;

	RtspServer.CallbackListener mRtspCallbackListener;
	private RtspServer mRtspServer;

	private ServiceConnection mRtspServiceConnection = new ServiceConnection() {
		@Override
		public void onServiceConnected(ComponentName name, IBinder service) {
			mRtspServer = (CustomRtspServer) ((RtspServer.LocalBinder) service)
					.getService();
			mRtspServer.addCallbackListener(mRtspCallbackListener);
			mRtspServer.start();
		}

		@Override
		public void onServiceDisconnected(ComponentName name) {

		}

	};

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);

		/*
		 * Cài đặt layout cho Activity;
		 */
		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
		setContentView(R.layout.activity_on_call);

		// init all views;
		initViews();

		// start rtsp server;
		Intent intent = new Intent(getApplicationContext(),
				CustomRtspServer.class);
		startService(intent);
	}

	@Override
	public void onSipServiceConnected(Bundle savedInstanceState) {
		Log.e(TAG, "");
		// TODO Auto-generated method stub

		// init components;
		initComponents();

		// init preview;
		initStreamingPreview();

		// bind rtsp service;
		Intent intent = new Intent(this, CustomRtspServer.class);
		bindService(intent, mRtspServiceConnection, Context.BIND_AUTO_CREATE);
	}

	private void initStreamingPreview() {
		LogAndroid.log(TAG, "initPreview(): init preview surfaceview");

		// Configures the SessionBuilder
		SessionBuilder.getInstance().setSurfaceHolder(mSurfaceHolderPr);

		try {
			mSession = SessionBuilder.getInstance().build();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			Log.d(TAG, "initStreamingPreview(): mSurfaceHolderPr null");
			e.printStackTrace();
		}
	}

	private void initStreamingPlaying() {
		LogAndroid.log(TAG, "initPreview(): init streaming and playing");

		mMediaPlayer.setDisplay(mSurfaceHolder);
		mMediaPlayer.setOnPreparedListener(this);
		mMediaPlayer.setOnVideoSizeChangedListener(this);
		setVolumeControlStream(AudioManager.STREAM_MUSIC);
	}

	private void initViews() {
		LogAndroid.log(TAG, "initViews(): init all views");

		/**
		 * Init preview component;
		 */
		mSurfaceViewPreview = (SurfaceView) findViewById(R.id.onCall_SurfaceView_Preview);
		mSurfaceHolderPr = mSurfaceViewPreview.getHolder();
		mSurfaceHolderPr.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);

		/**
		 * Init streaming component;
		 */
		mSurfaceView = (SurfaceView) findViewById(R.id.onCall_SurfaceView);
		mSurfaceHolder = mSurfaceView.getHolder();
		mSurfaceHolder.addCallback(this);
		mSurfaceHolder.setFormat(PixelFormat.RGBA_8888);

		/**
		 * Init other component;
		 */
		mBtEndCall = (ImageButton) findViewById(R.id.onCall_btEnCall);
		mBtEndCall.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
				/*
				 * Kết thúc cuộc gọi
				 */
				mSipService.hangup();

				/*
				 * Tiếp tục lắng nghe cuộc gọi
				 */
				mSipService.listen();

				/*
				 * Kết thúc Activity
				 */
				finish();
			}
		});
	}

	private void initComponents() {
		mSipService.setUACListener(this);
		mMediaPlayer = new MediaPlayer(this);
	}

	@Override
	public void onUACCallIncoming(UserAgent ua, NameAddress caller,
			NameAddress callee) {
		// TODO Auto-generated method stub
		/*
		 * This Activity doesn't catch this event
		 */
	}

	@Override
	public void onCallUASCancelled(UserAgent ua) {
		// TODO Auto-generated method stub
		/*
		 * This Activity doesn't catch this event
		 */
	}

	@Override
	public void onUACCallClosed(UserAgent ua) {
		// TODO Auto-generated method stub
		LogAndroid.log(TAG, "onUACCallClosed()");
		/*
		 * Hàm này được gọi khi kết thúc cuộc gọi;
		 */
		finish();
	}

	@Override
	public void surfaceChanged(SurfaceHolder holder, int format, int width,
			int height) {
		// TODO Auto-generated method stub

	}

	@Override
	public void surfaceCreated(SurfaceHolder holder) {
		// TODO Auto-generated method stub
		LogAndroid
				.log(TAG, "SurfacePreview has inited, init streaming playing");
		initStreamingPlaying();
	}

	@Override
	public void surfaceDestroyed(SurfaceHolder holder) {
		// TODO Auto-generated method stub

	}

	private void startPlayStreaming() {
		/*
		 * Đóng vai trò là UAC, khi có người gọi gọi tới thì địa chỉ caller sip
		 * sẽ khác null, nếu ngược lại thì là UAS
		 */
		LogAndroid.log(TAG,
				"startPlayStreaming(): start play streaming from rtsp server");
		String linkRTSPPath = null;
		if (mSipService.getCallerSipUrl() != null) {
			linkRTSPPath = "rtsp://" + mSipService.getCallerSipUrl().getHost()
					+ ":" + Integer.toString(Constant.RTSP_PORT);
			LogAndroid.log(TAG, "Device is Callee. Link Caller: "
					+ linkRTSPPath);
		} else {
			linkRTSPPath = "rtsp://" + mSipService.getCallSipUrl().getHost()
					+ ":" + Integer.toString(Constant.RTSP_PORT);
			LogAndroid.log(TAG, "Device is Caller. Link Callee: "
					+ linkRTSPPath);
		}

		LogAndroid.log(TAG, "startPlayStreaming(): " + linkRTSPPath);
		try {
			mMediaPlayer.setDataSource(linkRTSPPath);
			mMediaPlayer.prepareAsync();
		} catch (IllegalArgumentException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SecurityException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IllegalStateException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	@Override
	public void onPrepared(MediaPlayer mp) {
		// TODO Auto-generated method stub
		LogAndroid.log(TAG, "onPrepared(): Start play stream");
		mp.start();
	}

	@Override
	public void onVideoSizeChanged(MediaPlayer mp, int width, int height) {
		// TODO Auto-generated method stub
	}

	@Override
	protected void onDestroy() {
		// TODO Auto-generated method stub
		super.onDestroy();

		/*
		 * Release Vitamio;
		 */
		mMediaPlayer.release();
		mMediaPlayer = null;

		/*
		 * Stop preview streaming;
		 */
		mSession.stop();
		mSession.flush();
	}

	@Override
	public void onError(RtspServer server, Exception e, int error) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onMessage(RtspServer server, int message) {
		// TODO Auto-generated method stub

	}
}
